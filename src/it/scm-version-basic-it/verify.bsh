
/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */

import java.io.*;
import java.util.*;
import java.util.jar.*;
import org.codehaus.plexus.util.*;
import java.text.*;

boolean result = true;

try
{
    File target = new File( basedir, "target" );
    if ( !target.exists() || !target.isDirectory() )
    {
        System.err.println( "target file is missing or not a directory." );
        return false;
    }

    File artifact = new File ( target, "scm-version-basic-it-1.0-SNAPSHOT.jar" );
    if ( !artifact.exists() || artifact.isDirectory() )
    {
        System.err.println( "artifact file is missing or a directory." );
        return false;
    }

    JarFile jar = new JarFile( artifact );

    Attributes manifest = jar.getManifest().getMainAttributes();

    String scmRev = manifest.get( new Attributes.Name( "changeSet" ) );
    if ( scmRev == null || scmRev.length() < 1 )
    {
        System.err.println( "No manifest entry changeSet" );
        return false;
    }

    String expectedRev = "861e019fcc8b+";
    // We expect "861e019fcc8b+" and not "861e019fcc8b" because the maven-invoker-plugin modifies the pom.
    if (!expectedRev.equals(scmRev)) {
        System.err.println("Incorrect value for changeSet manifest entry.  Found: " + scmRev + ", expected: " + expectedRev);
        return false;
    }

    String branch = manifest.get( new Attributes.Name( "branch" ) );
    if ( branch == null || branch.length() < 1 )
    {
        System.err.println( "No manifest entry branch" );
        return false;
    }

    if (!"default".equals(branch)) {
        System.err.println( "Incorrect value for the \"branch\" manifest entry: " + branch);
        return false;
    }


    String timestamp = manifest.get( new Attributes.Name( "timestamp" ) );
    if ( timestamp == null || timestamp.length() < 1 )
    {
        System.err.println( "No manifest entry timestamp" );
        return false;
    }

    String datetime = manifest.get( new Attributes.Name( "datetime" ) );
    if ( datetime == null || datetime.length() < 1 )
    {
        System.err.println( "No manifest entry datetime" );
        return false;
    }
    DateFormat dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss z");
    // Assert format of the datetime attribute
    Date date = dateFormat.parse(datetime);

    if (date.getTime() / 1000 != Long.parseLong(timestamp.split("\\.")[0])) {
        System.err.println( "Validation of the timestamp manifest entry failed." );
        System.err.println( "The datetime entry is " + datetime + ".");
        System.err.println( "It converts to the following timestamp: " + date.getTime() / 1000);
        System.err.println( "The value found in the timestamp entry was: " + timestamp);
        return false;
    }

}
catch( Throwable e )
{
    e.printStackTrace();
    result = false;
}

return result;
